<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.Remoting.Messaging" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
//--------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by a tool.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//--------------------------------------------------------------------------------------------------

#pragma warning disable 1570

using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Globalization; 
using System.Runtime.CompilerServices;

using Windows.ApplicationModel.Resources;

<#
    string filename = Path.GetFileNameWithoutExtension(Host.TemplateFile);
#>

namespace <#= System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint") #>
{
    [CompilerGenerated]
    [DebuggerNonUserCode]
    [GeneratedCode("TextTemplatingFileGenerator", "1.0")]
    public static class <#= filename #>
    {
        private static readonly ResourceLoader ActiveResourceLoader = ResourceLoader.GetForCurrentView("<#= filename #>");

        public static void Init()
        {
            // Do Nothing
        }

<#
    string inputFile = Path.ChangeExtension(Host.TemplateFile, "resw");
    XDocument xDocument = XDocument.Load(inputFile);

    IEnumerable<XElement> dataElements = xDocument.Descendants("data").Where(e => e.Attribute("type") == null);
    ILookup<string, XElement> groupedResources = dataElements.ToLookup(dataElement =>
    {
        string name = dataElement.Attribute("name").Value;
        string[] nameParts = name.Split('_');
        if (nameParts.Length >= 2)
        {
            return nameParts[0];
        }
        return string.Empty;
    });

    foreach (IGrouping<string, XElement> resElement in groupedResources)
    {
        if (!string.IsNullOrWhiteSpace(resElement.Key))
        {
#>
        public static class <#= resElement.Key #>
        {
<#
        }

        foreach (XElement dataElement in resElement)
        {
            string comment = dataElement.Descendants("comment").FirstOrDefault()?.Value;
            string resName = dataElement.Attribute("name").Value;
            string methodName = resName.Substring(resElement.Key.Length).Trim('_').Replace(".", "_");
            string value = dataElement.Descendants("value").First().Value.Replace("\n", " ");
            if (value.Length > 100)
            {
                value = value.Substring(0, 100) + "...";
            }


            if (!string.IsNullOrWhiteSpace(comment))
            {
#>
            /// <summary>
            ///      Looks up a Text similar to "<#= value #>"
            /// </summary>
            public static string <#= methodName #>(<#= comment #>)
            {
                return string.Format(CultureInfo.CurrentCulture, ActiveResourceLoader.GetString("<#= resName #>"), <#= string.Join(", ", comment.Split(',').Select(e => e.Trim().Split(' ')[1])) #>);
            }

<#
            }
            else
            {
#>
            /// <summary>
            ///      Looks up a Text similar to "<#= value #>"
            /// </summary>
            public static string <#= methodName #>
            {
                get { return ActiveResourceLoader.GetString("<#= resName #>"); }
            }

<#
            }
        }



        if (!string.IsNullOrWhiteSpace(resElement.Key))
        {
#>
        }

<#

        }
    }



#>
    }
}

#pragma warning restore 1570